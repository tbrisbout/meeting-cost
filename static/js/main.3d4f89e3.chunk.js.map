{"version":3,"sources":["Cost.js","App.js","serviceWorker.js","index.js"],"names":["Result","styled","div","_templateObject","Cost","_ref2","_ref","_ref2$duration","duration","_ref2$attendeeCount","attendeeCount","react_default","a","createElement","data-testid","AppShell","App_templateObject","Header","header","_templateObject2","AppTitle","h1","_templateObject3","Main","main","_templateObject4","Footer","footer","_templateObject5","Input","input","_templateObject6","handleEvent","handler","event","target","value","App","_useState","useState","_useState2","Object","slicedToArray","setDuration","_useState3","_useState4","setAttendeeCount","type","min","onChange","src_Cost","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3d4f89e3.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Result = styled.div`\n  font-size: 4em;\n`;\n\nconst DEFAULT_DAILY_RATE = 600;\nconst DEFAULT_MINUTES_IN_A_DAY = 8 * 60;\n\nconst computeCost = ({ duration, attendeeCount }) =>\n  DEFAULT_DAILY_RATE * duration * attendeeCount / DEFAULT_MINUTES_IN_A_DAY\n\nconst Cost = ({ duration = 0, attendeeCount = 0 }) => (\n  <Result data-testid=\"cost\">{computeCost({ duration, attendeeCount })}â‚¬</Result>\n);\n\nexport default Cost;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Cost from './Cost';\n\nconst AppShell = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n`;\n\nconst Header = styled.header`\n  background: tomato;\n`\n\nconst AppTitle = styled.h1`\n  color: white;\n`;\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n`\n\nconst Footer = styled.footer`\n  font-size: 1.5em;\n  color: tomato;\n`;\n\nconst Input = styled.input`\n  width: 2em;\n  font-size: 2em;\n`;\n\nconst handleEvent = handler => event => handler(event.target.value);\n\nconst App = () => {\n  const [duration, setDuration] = useState(30);\n  const [attendeeCount, setAttendeeCount] = useState(5);\n\n  return (\n    <AppShell>\n      <Header>\n        <AppTitle data-testid=\"appTitle\">Meeting Cost</AppTitle>\n      </Header>\n      <Main>\n        <p>\n          <Input type=\"number\" min=\"0\" value={duration} onChange={handleEvent(setDuration)} /> minutes with {' '}\n          <Input type=\"number\" min=\"0\" value={attendeeCount} onChange={handleEvent(setAttendeeCount)} /> attendees\n        </p>\n\n        <Cost {...{attendeeCount, duration}}/>\n      </Main>\n      <Footer>\n        <p data-testid=\"appFooter\">Do you really need this?</p>\n      </Footer>\n    </AppShell>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}